"use strict";(self.webpackChunkaethermark_docs=self.webpackChunkaethermark_docs||[]).push([[154],{2403:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"formal-definition","title":"Formal Definition","description":"","source":"@site/docs/formal-definition.md","sourceDirName":".","slug":"/formal-definition","permalink":"/aethermark-docs/docs/formal-definition","draft":false,"unlisted":false,"editUrl":"https://github.com/MukulWaval/aethermark-docs/tree/main/docs/formal-definition.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Formal Definition"},"sidebar":"docsSidebar","previous":{"title":"Introduction","permalink":"/aethermark-docs/docs/intro"}}');var i=r(4848),a=r(8453);const c={sidebar_position:2,title:"Formal Definition"},s=void 0,o={},l=[];function d(e){const n={code:"code",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ebnf",metastring:'title="Syntax"',children:'\r\ndocument = { block } ;\r\n\r\nblock = leaf_block | container_block ;\r\n\r\nleaf_block =\r\n\xa0 \xa0 \xa0 thematic_break\r\n\xa0 \xa0 | atx_heading\r\n\xa0 \xa0 | setex_heading\r\n\xa0 \xa0 | indented_code_block\r\n\xa0 \xa0 | fenced_code_block\r\n\xa0 \xa0 | html_block\r\n\xa0 \xa0 | link_reference_definition\r\n\xa0 \xa0 | paragraph\r\n\xa0 \xa0 | blank_line\r\n\xa0 \xa0 | table ;\r\n\r\ncontainer_block =\r\n\xa0 \xa0 \xa0 block_quote\r\n\xa0 \xa0 | list_item\r\n\xa0 \xa0 | list ;\r\n\r\nthematic_break =\r\n\xa0 \xa0 [ space ] , [ space ] , [ space ] ,\r\n\xa0 \xa0 (\r\n\xa0 \xa0 \xa0 \xa0 "-" , { whitespace } , "-" , { whitespace } , "-" , { whitespace } , { "-" , { whitespace } }\r\n\xa0 \xa0 \xa0 | "_" , { whitespace } , "_" , { whitespace } , "_" , { whitespace } , { "_" , { whitespace } }\r\n\xa0 \xa0 \xa0 | "*" , { whitespace } , "*" , { whitespace } , "*" , { whitespace } , { "*" , { whitespace } }\r\n\xa0 \xa0 ) ,\r\n\xa0 \xa0 newline ;\r\n\r\natx_heading =\r\n\xa0 \xa0 [ space ] , [ space ] , [ space ] ,\r\n\xa0 \xa0 "#" , [ "#" ] , [ "#" ] , [ "#" ] , [ "#" ] , [ "#" ] ,\r\n\xa0 \xa0 (\r\n\xa0 \xa0 \xa0 \xa0 newline\r\n\xa0 \xa0 \xa0 | (\r\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 whitespace , { whitespace } ,\r\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 inline ,\r\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 [ whitespace , { "#" } ] ,\r\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 newline\r\n\xa0 \xa0 \xa0 \xa0 )\r\n\xa0 \xa0 ) ;\r\n\r\nwhitespace = space | tab ;\r\nnewline = [ "\\n" ] , [ "\\r" ] ;\r\nspace = " " ;\r\ntab = "\\t" ;\n'})})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);